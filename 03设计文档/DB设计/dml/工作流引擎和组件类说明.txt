
系统配置
（1）临时数据缓存级别，系统参数WK_OUTPUT_CACHE_DATA_LEVEL设定缓存级别，FULL_CACHE全量缓存，EXPIRE_CLEAN过期清理（配合WK_OUTPUT_CACHE_EXPIRE_DAYS），ONLY_LAST仅最后一次，NO_CACHE不做缓存（作业完毕清理）
	<!-- 先只支持ONLY_LAST，实验工作台运行、实验离线调度运行、实验在线调度运行，先只考虑仅缓存最后一次运行的数据输出内容，同时搭配WK_OUTPUT_CACHE_EXPIRE_DAYS做定期清理 -->
（2）数据输出端口schema分析开关，系统参数WK_OUTPORT_SCHEMA_MAX_FIELDS控制是否为超限终端，默认值256字段数，以及组件类是否支持动态分析
（3）实验最多节点数量WK_FLOW_MAX_NODES默认1024

实验管理 & 工作流引擎
（1）组件参数更新，先校验新老参数值是否发生变化
（2）组件数据输出端口schema更新失败时，自动对所有下游节点的schema做清理
（3）读数据组件的数据查看走viewDataTableByName，其他组件输出数据查看走viewDataTableByID
（4）通过ClassLoader.findClass方法查找组件类，再找到组件类bean
（5）任一输入端口schema状态非正常，停止动态分析，并将该状态传递到下游
（6）数据表写入（动态）和实验发布版本（实验调度）：保存关联工作流快照信息，对动态模型仅一处地方写入，对动态数据表仅一处地方写入，发布版本更新或者删除自动清理过期动态模型和动态数据表

组件基类

public class ModuleBoard {
	//在所有组件类init里注册singleton bean object
	
	//ModuleMapper<module-class-path, module-bean-object>
	static final HashMap<String, ModuleBase> mapper = new HashMap<String, ModuleBase>();
	
	//获取组件class-path to object映射器 
	static Mapper getMapper();
}


@service
public interface IModuleBase {
	//方法失败或异常抛出moduleException，组件类实现该接口，适当封装一些中间abstract组件类以便复用
	
	
	////////////////////////////////////组件bean初始化//////////////////////////////////////////
	
	//必须
	@postconstruct
	void register() {
		ModuleBoard.getMapper().put(this.getClass().getName(), this);
	}
	
	
	//////////////////////////////节点增删查和参数更改事件相关//////////////////////////////////
	
	//是否捕获节点新增事件
	//返回false，否
	//返回true，是
	boolean catchCreateNode();

	//发生节点新增时，例如：数据表读取组件需要校验表名对应的数据表是否正常，存在情况下，设置节点状态为ready，否则为not ready
	void onCreateNode(NodeContentDto<node, parameters, inputPorts, outputPorts>);
	
	//是否捕获节点删除事件
	//返回false，否
	//返回true，是
	boolean catchDeleteNode();
	
	//发生节点删除时，例如：暂无
	void onDeleteNode(NodeContentDto<node, parameters, inputPorts, outputPorts>);
	
	//是否捕获节点查询事件
	//返回false，否
	//返回true，是
	boolean catchQueryNode();
	
	//发生节点查询时，例如：数据表读取组件需要校验对应的数据表是否正常，存在情况下，设置节点状态为ready，否则为not ready
	void onQueryNode(NodeContentDto<node, parameters, inputPorts, outputPorts>);
	
	//是否捕获参数更改事件
	//返回false，否
	//返回true，是
	boolean catchUpdateParameter();

	//发生参数更改时，例如：参数在业务逻辑上的合法校验
	void onUpdateParameter(NodeContentDto<node, parameters, inputPorts, outputPorts>, updateParameterList);
	
	
	///////////////////////////////////节点链接事件相关/////////////////////////////////////////
	//该类事件目前不开放，如无必要，后期也不建议开放，对框架冲突太大，代码复杂度加大
	
	
	//是否捕获入站链接事件（待定）
	//返回false，否
	//返回true，是
	//boolean catchInboundLink();

	//发生入站链接时（待定），例如：暂无
	//void onInboundLink(NodeContentDto<node, parameters, inputPorts, outputPorts>, OutputPortDto);
	
	//是否捕获出站链接事件（待定）
	//返回false，否
	//返回true，是
	//boolean catchOutboundLink();
	
	//发生出站链接时（待定），例如：暂无
	//void onOutboundLink(NodeContentDto<node, parameters, inputPorts, outputPorts>, InputPortDto);
	
	
	///////////////////////////////////任务执行事件相关/////////////////////////////////////////
	
	//是否捕获任务执行事件
	//返回false，否
	//返回true，是
	boolean catchTaskExecution();
	
	//任务执行事件处理，例如：读数据表将输出内容"OUT@DataTable-t1<M>"特征值置为"CCP@TableName"特征值对应数据表的ID值
	//返回更新后的task-context信息，NULL代表无更新
	TaskContextDto onTaskExecution(TaskContextDto<task, component, execution, optimize_execution, input, output, parameter>);
	
	
	////////////////////////////////////运行动态模拟相关////////////////////////////////////////
	
	//是否支持动态分析数据输出端口schema
	//返回false，不支持
	//返回true，支持
	boolean supportDynamicAnalyzeSchema();
	
	//触发分析数据输出端口schema的特征代码集合
	//返回特征代码集合，NULL代表无触发特征
	paremeterCodeSet analyzeSchemaTriggerParameters() {
		static final HashSet<parameterCode> triggerParameters = new HashSet<String>() {{
			add("xxx");
			add("yyy");
		}};
		resturn triggerParameters;
	};
	
	//分析数据输出端口schema
	//返回更新后的数据输出端schema列表，NULL代表无更新
	OutportSchemaDtoList analyzeSchema(NodeContentDto<node, parameters, inputPorts, outputPorts>)；
	
	//组件菜单配置，数据库中配置，模版怎么定义，还是暂时先放前端工程里配置
}




//////////////////////////////////////////////////////////////////

工作流发布、工作流调度、在线预测服务的相关表结构后面再进一步完善。

｛数据上传 + 服务调度 | 外部数据 + 服务调度｝

工作流发布（运行成功后可发布，需要桥接/重定向/投影类似功能的全局输入输出组件）
工作流调度流水（定时任务，服务API）
工作流调度参数（全局参数传入值）
工作流调度缓存（仅缓存最后一次，临时数据采用动态表、动态模型等等，全局输入输出组件如何设计待商榷）

在线工作流调度服务发布
在线工作流调度服务的资源和接口信息
在线工作流调度服务的调用记录和统计信息


人工操作的运行，定义为调试模式，快照允许缓存全量数据
其他操作的运行，定义为发布模式，快照仅保留概要数据

【在线预测服务，以项目为单位对模型预测服务分组】
在线预测服务发布（普通模型和临时模型都可以发布，前者直接关联模型id，后者关联flowid+nodeid+charid）
在线预测服务的资源和接口信息 （运行容器、URL和签名认证）
在线预测服务的接口调用记录和统计信息

【实时流式计算 + 在线预测服务，支撑在线预测场景】
